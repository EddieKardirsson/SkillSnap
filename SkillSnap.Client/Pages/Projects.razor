@page "/projects"
@inject ProjectService ProjectService
@inject UserSessionService UserSession
@inject PortfolioUserService PortfolioService
@implements IDisposable

<PageTitle>Projects - SkillSnap</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Projects</h3>
        
        @if (UserSession.IsAuthenticated)
        {
            <button class="btn btn-primary" @onclick="ShowAddForm">
                <i class="bi bi-plus-circle"></i> Add Project
            </button>
        }
    </div>

    @if (showForm)
    {
        <!-- Add/Edit Form -->
        <div class="card mb-4">
            <div class="card-header">
                <h5>@(isEditing ? "Edit Project" : "Add New Project")</h5>
            </div>
            <div class="card-body">
                <EditForm Model="projectForm" OnValidSubmit="HandleSaveProject">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-3" />

                    <div class="mb-3">
                        <label class="form-label">Title:</label>
                        <InputText @bind-Value="projectForm.Title" class="form-control" placeholder="Project title" />
                        <ValidationMessage For="@(() => projectForm.Title)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description:</label>
                        <InputTextArea @bind-Value="projectForm.Description" class="form-control" rows="4" 
                            placeholder="Describe your project..." />
                        <ValidationMessage For="@(() => projectForm.Description)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Image URL:</label>
                        <InputText @bind-Value="projectForm.ImageUrl" class="form-control" 
                            placeholder="https://example.com/image.jpg" />
                        <ValidationMessage For="@(() => projectForm.ImageUrl)" class="text-danger" />
                        <div class="form-text">Optional: Add a URL to your project image</div>
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-success" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            @(isEditing ? "Update Project" : "Add Project")
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="CancelForm">
                            Cancel
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (projects.Any())
    {
        <div class="row">
            @foreach (var project in projects)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100">
                        @if (!string.IsNullOrEmpty(project.ImageUrl))
                        {
                            <img src="@project.ImageUrl" class="card-img-top" alt="@project.Title" style="height: 200px; object-fit: cover;">
                        }
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@project.Title</h5>
                            <p class="card-text flex-grow-1">@project.Description</p>
                            
                            @if (project.PortfolioUser != null)
                            {
                                <small class="text-muted">By: @project.PortfolioUser.Name</small>
                            }
                            
                            @if (CanUserEditProject(project))
                            {
                                <div class="mt-2 d-flex gap-2">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => StartEditProject(project)">
                                        <i class="bi bi-pencil"></i> Edit
                                    </button>
                                    @if (UserSession.IsAdmin)
                                    {
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteProject(project.Id)">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <h4>No Projects Found</h4>
            <p>There are currently no projects to display.</p>
            @if (UserSession.IsAuthenticated)
            {
                <button class="btn btn-primary" @onclick="ShowAddForm">Add the first project!</button>
            }
        </div>
    }

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-success mt-3">@message</div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>

@code {
    private List<Project> projects = new();
    private Project projectForm = new();
    private PortfolioUser? userProfile;
    private bool isLoading = true;
    private bool showForm = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private string message = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        UserSession.OnStateChanged += StateHasChanged;
        await LoadProjects();
        await LoadUserProfile();
    }

    private async Task LoadProjects()
    {
        isLoading = true;
        try
        {
            projects = await ProjectService.GetProjectsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading projects: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadUserProfile()
    {
        if (UserSession.IsAuthenticated)
        {
            try
            {
                userProfile = await PortfolioService.GetMyProfileAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading user profile: {ex.Message}");
            }
        }
    }

    private bool CanUserEditProject(Project project)
    {
        if (!UserSession.IsAuthenticated) return false;
        if (UserSession.IsAdmin) return true;
        return userProfile != null && project.PortfolioUserId == userProfile.Id;
    }

    private void ShowAddForm()
    {
        if (userProfile == null)
        {
            errorMessage = "You must have a profile to add projects. Please create your profile first.";
            return;
        }

        showForm = true;
        isEditing = false;
        projectForm = new Project { PortfolioUserId = userProfile.Id };
        message = "";
        errorMessage = "";
    }

    private void StartEditProject(Project project)
    {
        showForm = true;
        isEditing = true;
        projectForm = new Project
        {
            Id = project.Id,
            Title = project.Title,
            Description = project.Description,
            ImageUrl = project.ImageUrl,
            PortfolioUserId = project.PortfolioUserId
        };
        message = "";
        errorMessage = "";
    }

    private void CancelForm()
    {
        showForm = false;
        isEditing = false;
        projectForm = new();
        message = "";
        errorMessage = "";
    }

    private async Task HandleSaveProject()
    {
        isSaving = true;
        errorMessage = "";
        message = "";

        try
        {
            if (isEditing)
            {
                var success = await ProjectService.UpdateProjectAsync(projectForm.Id, projectForm);
                if (success)
                {
                    message = "Project updated successfully!";
                    await LoadProjects();
                    CancelForm();
                }
                else
                {
                    errorMessage = "Failed to update project. Please try again.";
                }
            }
            else
            {
                var createdProject = await ProjectService.AddProjectAsync(projectForm);
                if (createdProject != null)
                {
                    message = "Project added successfully!";
                    await LoadProjects();
                    CancelForm();
                }
                else
                {
                    errorMessage = "Failed to add project. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving project: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteProject(int projectId)
    {
        if (!UserSession.IsAdmin) return;

        try
        {
            var success = await ProjectService.DeleteProjectAsync(projectId);
            if (success)
            {
                message = "Project deleted successfully!";
                await LoadProjects();
            }
            else
            {
                errorMessage = "Failed to delete project.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting project: {ex.Message}";
        }
    }

    public void Dispose()
    {
        UserSession.OnStateChanged -= StateHasChanged;
    }
}