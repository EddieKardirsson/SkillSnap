@* Skill tags using real data from API *@
@using SkillSnap.Shared.Models
@inject SkillService SkillService

<div class="d-flex flex-wrap gap-2 @Class" style="@Style" @attributes="AdditionalAttributes">
    @foreach (var tag in TagsToRender)
    {
        <span class="@BadgeClass"
              role="@(OnClick.HasDelegate ? "button" : null)"
              style="@(OnClick.HasDelegate ? "cursor:pointer;" : null)"
              @onclick="(() => OnClick.InvokeAsync(tag))">
            @tag
        </span>
    }
</div>

<!-- Testing buttons for POST functionality -->
<div class="mt-3">
    <button class="btn btn-primary me-2" @onclick="AddTestSkill">Add Test Skill</button>
    <button class="btn btn-secondary" @onclick="RefreshSkills">Refresh Skills</button>
</div>

@code {
    // Data
    [Parameter] public IEnumerable<string>? Items { get; set; }

    // Interaction
    [Parameter] public EventCallback<string> OnClick { get; set; }

    // Styling / attributes
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public string Style { get; set; } = string.Empty;
    [Parameter] public string BadgeClass { get; set; } = "badge rounded-pill text-bg-primary";
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }

    // Real data from API
    private List<Skill> skills = new();

    // Keep current <SkillTags /> usage working via real data
    private IEnumerable<string> TagsToRender => 
        Items ?? skills.Select(s => $"{s.Name} ({s.Level})");

    protected override async Task OnInitializedAsync()
    {
        skills = await SkillService.GetSkillsAsync();
    }

    // Test POST functionality
    private async Task AddTestSkill()
    {
        var skillLevels = new[] { "Beginner", "Intermediate", "Advanced", "Expert" };
        var skillNames = new[] { "C#", "JavaScript", "React", "Azure", "SQL", "Docker" };
        
        var random = new Random();
        var testSkill = new Skill
        {
            Name = skillNames[random.Next(skillNames.Length)],
            Level = skillLevels[random.Next(skillLevels.Length)],
            PortfolioUserId = 1 // Hardcoded for now
        };

        var createdSkill = await SkillService.AddSkillAsync(testSkill);
        if (createdSkill != null)
        {
            Console.WriteLine($"Created skill: {createdSkill.Name} - {createdSkill.Level}");
            skills = await SkillService.GetSkillsAsync(); // Refresh the list
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Failed to create skill");
        }
    }

    private async Task RefreshSkills()
    {
        skills = await SkillService.GetSkillsAsync();
        StateHasChanged();
    }
}