@* Reusable project grid using real data from API *@
@using SkillSnap.Shared.Models
@inject ProjectService ProjectService

<div class="row row-cols-1 row-cols-md-2 g-3 @Class" style="@Style" @attributes="AdditionalAttributes">
    @foreach (var p in ItemsToRender)
    {
        <div class="col">
            <div class="card h-100 shadow-sm @(OnItemClick.HasDelegate ? "cursor-pointer" : null)"
                 role="@(OnItemClick.HasDelegate ? "button" : null)"
                 @onclick="(() => OnItemClick.InvokeAsync(p))">
                <img src="@p.ImageUrl" class="card-img-top" alt="@p.Title" style="max-width: @ImageMaxWidth;" />
                <div class="card-body">
                    <h6 class="card-title mb-1">@p.Title</h6>
                    @if (!string.IsNullOrWhiteSpace(p.Description))
                    {
                        <p class="card-text text-muted">@p.Description</p>
                    }
                </div>
            </div>
        </div>
    }
</div>

<!-- Testing buttons for POST functionality -->
<div class="mt-3">
    <button class="btn btn-primary me-2" @onclick="AddTestProject">Add Test Project</button>
    <button class="btn btn-secondary" @onclick="RefreshProjects">Refresh Projects</button>
</div>

@code {
    // Public so callers can create items to pass in
    public class ProjectItem
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string ImageUrl { get; set; } = string.Empty;
    }

    [Parameter] public IEnumerable<ProjectItem>? Items { get; set; }
    [Parameter] public EventCallback<ProjectItem> OnItemClick { get; set; }

    // Styling / attributes
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public string Style { get; set; } = string.Empty;
    [Parameter] public string ImageMaxWidth { get; set; } = "20rem";
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }

    // Real data from API
    private List<Project> projects = new();

    private IEnumerable<ProjectItem> ItemsToRender => 
        Items ?? projects.Select(p => new ProjectItem
        {
            Title = p.Title,
            Description = p.Description,
            ImageUrl = string.IsNullOrWhiteSpace(p.ImageUrl) 
                ? "https://picsum.photos/seed/project/400/300" 
                : p.ImageUrl
        });

    protected override async Task OnInitializedAsync()
    {
        projects = await ProjectService.GetProjectsAsync();
    }

    // Test POST functionality
    private async Task AddTestProject()
    {
        var testProject = new Project
        {
            Title = $"Test Project {DateTime.Now:HH:mm:ss}",
            Description = "This is a test project created from the UI",
            ImageUrl = "https://picsum.photos/seed/test/400/300",
            PortfolioUserId = 1 // Hardcoded for now
        };

        var createdProject = await ProjectService.AddProjectAsync(testProject);
        if (createdProject != null)
        {
            Console.WriteLine($"Created project: {createdProject.Title}");
            projects = await ProjectService.GetProjectsAsync(); // Refresh the list
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Failed to create project");
        }
    }

    private async Task RefreshProjects()
    {
        projects = await ProjectService.GetProjectsAsync();
        StateHasChanged();
    }
}